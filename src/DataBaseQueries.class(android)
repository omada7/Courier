package com.example.vanallen.courier_aei;


import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;

import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONObject;

import java.util.ArrayList;

public class DatabaseQueries
{
    ProgressDialog progressDialog; // mas dixnei to loading sreen oso ekteleite to query sth vash

    public static final int CONNECTION_TIMEOUT = 1000 * 20;
    public static final String SERVER_ADDRESS = "http://teipir.gr";

    public DatabaseQueries(Context context)
{
    progressDialog = new ProgressDialog(context);//meso tou konstraktora tha stelnoume munhmata sthn othonh gia dieukrinhsh
    progressDialog.setCancelable(false);         // oso ektelountai ta queries sto background ths efarmoghs
    progressDialog.setTitle("loading");
    progressDialog.setMessage("Please wait...");

}


    public void fetchCourierDataInBackground(Courier courier,GetCourierCallback courierCallback)
    {
        progressDialog.show();
        new fetchCourierDataAsyncTask(courier,courierCallback).execute();


    }



    public class fetchCourierDataAsyncTask extends AsyncTask<Void, Void, Courier>
    {
        Courier courier;
        GetCourierCallback courierCallback;


        public fetchCourierDataAsyncTask(Courier courier, GetCourierCallback courierCallback)
        {
            this.courier = courier;
            this.courierCallback = courierCallback;


        }

        @Override
        protected Courier doInBackground(Void... params)
        {
            ArrayList<NameValuePair> dataToSend = new ArrayList<>();
            dataToSend.add(new BasicNameValuePair("username", courier.username));
            dataToSend.add(new BasicNameValuePair("password",courier.password));

            HttpParams httpRequestParams = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout(httpRequestParams, CONNECTION_TIMEOUT);
            HttpConnectionParams.setSoTimeout(httpRequestParams, CONNECTION_TIMEOUT);

            HttpClient client = new DefaultHttpClient(httpRequestParams);
            HttpPost post = new HttpPost(SERVER_ADDRESS + "FetchCourierData.php");

            Courier returnedCourier = null;
            try{
                post.setEntity(new UrlEncodedFormEntity(dataToSend));
                HttpResponse httpResponse = client.execute(post);
                HttpEntity entity = httpResponse.getEntity();
                String result = EntityUtils.toString(entity);
                JSONObject jObject = new JSONObject(result);

                if(jObject.length() == 0)
                 {
                    returnedCourier = null;
                 }else
                   {
                       int orderId = jObject.getInt("orderId");
                       String firstname = jObject.getString("firstname");
                       String lastname = jObject.getString("lastname");
                       String email = jObject.getString("email");
                       String address = jObject.getString("address");

                       returnedCourier = new Courier(courier.username,courier.password, orderId , firstname , lastname , email , address);

                   }

            }catch (Exception e)
            {
                e.printStackTrace();
            }

            return returnedCourier;
        }

        @Override
        protected void onPostExecute(Courier returnedCourier)
        {
            progressDialog.dismiss();
            courierCallback.done(returnedCourier);
            super.onPostExecute(returnedCourier);
        }

    }


}
